#!/usr/bin/env python

import errno
import os
import sys
import time
import argparse

from confparser import ConfParser, ConfParserException
from transformer import *

_DEFAULT_CONF_FILE = '~/.txts.conf'

def parse_args():
    parser = argparse.ArgumentParser(
        prog='TxtStyle',
        description='Prettifies output of console programs.')

    parser.add_argument('filepath', nargs='?')
    parser.add_argument('-n', nargs=1)
    parser.add_argument('-c', nargs=1)
    return parser.parse_args()

def get_conf_lines(confpath):
    conf = openfile(confpath)
    try:
        return conf.readlines()
    finally:
        conf.close()

def openfile(filepath):
    try:
        return open(filepath)
    except IOError, e:
        if e.errno == errno.ENOENT:
            sys.stderr.write("File not found: %s\n" % filepath)
        else:
            sys.stderr.write("%s\n" % e)
        sys.exit(e.errno)

def get_styles(conf_parser, style_def_name):
    try:
        return conf_parser.get_styles(style_def_name)
    except ConfParserException, e:
        sys.stderr.write("%s\n" % e)
        sys.exit(1)


class Txts:

    def __init__(self, styles, filepath=None):
        self.transformer = Transformer(styles)
        self.filepath = filepath

    def transform(self):
        if self.filepath:
            self.transform_file()
        else:
            self.transform_pipe()

    def transform_file(self):
        f = openfile(self.filepath)
        try:
            while True:
                line = f.readline()
                if not line:
                    break
                self.__style(line)
        except KeyboardInterrupt:
            pass
        finally:
            f.close()
        

    def transform_pipe(self):
        try:
            while True:
                line = sys.stdin.readline()
                if not line:
                    break
                self.__style(line)
        except KeyboardInterrupt:
            pass

    def __style(self, line):
        styled_line = self.transformer.style(line.strip('\n'))
        sys.stdout.write(styled_line + '\n')



def main():
    args = parse_args()
    styles = []
    conf = os.path.expanduser(_DEFAULT_CONF_FILE)
    if args.c:
        conf = args.c[0]

    if args.n:
        conf_lines = get_conf_lines(conf)
        conf_parser = ConfParser(conf_lines)
        style_def_name = args.n[0]
        styles = get_styles(conf_parser, style_def_name)

    txts = Txts(styles, args.filepath)
    txts.transform()

if __name__ == "__main__":
    main()

