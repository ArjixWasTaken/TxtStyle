#!/usr/bin/env python

import errno
import os
import sys
import time
import argparse

from txtstyle.confparser import ConfParser, ConfParserException
from txtstyle.transformer import *

class Txts:

    def __init__(self, styles):
        self.transformer = Transformer(styles)

    def transform_input(self):
        try:
            while True:
                line = sys.stdin.readline()
                if not line:
                    # time.sleep(0.1)
                    continue
                self.__style(line)
        except KeyboardInterrupt:
            pass

    def __style(self, line):
        styled_line = self.transformer.style(line.strip('\n'))
        sys.stdout.write(styled_line + '\n')


def get_conf_parser(conf):
    try:
        return ConfParser(conf)
    except IOError, e:
        if e.errno == errno.ENOENT:
            sys.stderr.write("Configuration file not found: %s\n" % conf)
        else:
            sys.stderr.write("%s\n" % e)
        sys.exit(e.errno)

def parse_args():
    parser = argparse.ArgumentParser(
        prog='txts',
        description='Prettifies output of console programs.')

    parser.add_argument('-n', nargs=1)
    parser.add_argument('-f', nargs=1)
    return parser.parse_args()


def get_styles(conf_parser, style_def_name):
    try:
        return conf_parser.get_styles(style_def_name)
    except ConfParserException, e:
        sys.stderr.write("%s\n" % e)
        sys.exit(1)

__DEFAULT_CONF_FILE__ = '~/.txts.conf'

def main():
    args = parse_args()
    styles = []
    conf = os.path.expanduser(__DEFAULT_CONF_FILE__)
    if args.f:
        conf = args.f[0]

    conf_parser = get_conf_parser(conf)
    
    if args.n:
        style_def_name = args.n[0]
        styles = get_styles(conf_parser, style_def_name)

    txts = Txts(styles)
    txts.transform_input()

if __name__ == "__main__":
    main()

