#!/usr/bin/env python

import errno
import os
import shutil
import sys
import time
import argparse

from txtstyle.confparser import ConfParser, ConfParserException
from txtstyle.transformer import Transformer

_USER_HOME_CONF_FILE = os.path.join(os.getenv('HOME'), '.txts.conf')
_DEFAULT_CONF_FILE = 'txts.conf.default'

class Txts:

    def __init__(self, styles, filepath=None, color_always=False):
        self.transformer = Transformer(styles)
        self.filepath = filepath
        self.color_always = color_always

    def transform(self):
        if self.filepath:
            self.transform_file()
        elif not sys.stdin.isatty():
            self.transform_pipe()

    def transform_file(self):
        try:
            with open(self.filepath, 'r') as infile:
                for line in infile:
                    if sys.stdout.isatty() or self.color_always:
                        self.__style(line)
                    else:
                        sys.stdout.write(line)
        except KeyboardInterrupt:
            pass
        except IOError, e:
            if e.errno == errno.ENOENT:
                sys.stderr.write("File not found: %s\n" % self.filepath)
            elif e.errno == errno.EPIPE:
                # broken pipe
                pass
            else:
                sys.stderr.write("%s\n" % e)
            sys.exit(e.errno)

    def transform_pipe(self):
        try:
            while True:
                line = sys.stdin.readline()
                if not line:
                    break
                self.__style(line)
        except KeyboardInterrupt:
            pass
        finally:
            sys.stdin.close()

    def __style(self, line):
        styled_line = self.transformer.style(line.strip('\n'))
        sys.stdout.write(styled_line + '\n')


def parse_args():
    parser = argparse.ArgumentParser(
        prog='TxtStyle',
        description='Prettifies output of console programs.')

    parser.add_argument('filepath', nargs='?', help='Path to a file.')
    parser.add_argument('-n', nargs=1, help='Name of a style to apply.')
    parser.add_argument('-c', nargs=1, help='Path to style configuration file. Defaults to: ~/.txt.conf')
    parser.add_argument('--color-always', help='Always use color. Similar to grep --color=always.', action='store_true')
    return parser.parse_args()

def get_styles(conf_parser, style_def_name):
    try:
        return conf_parser.get_styles(style_def_name)
    except ConfParserException, e:
        sys.stderr.write("%s\n" % e)
        sys.exit(1)

def get_conf_lines(args):
    confpath = get_conf_path(args)
    with open(confpath, 'r') as f:
        return f.readlines()

def get_conf_path(args):
    if args.c:
        # User-specified conf file
        filepath = args.c[0]
        if not os.path.isfile(filepath):
            sys.stderr.write("File not found: %s\n" % filepath)
            sys.exit(errno.ENOENT)
        return filepath
    else:
        # User-home conf file (~/.txt.conf)
        if not os.path.isfile(_USER_HOME_CONF_FILE):
            shutil.copyfile(_DEFAULT_CONF_FILE, _USER_HOME_CONF_FILE)
        return _USER_HOME_CONF_FILE

def main():
    args = parse_args()
    styles = []

    if args.n:
        conf_lines = get_conf_lines(args)
        conf_parser = ConfParser(conf_lines)
        style_def_name = args.n[0]
        styles = get_styles(conf_parser, style_def_name)

    txts = Txts(styles, args.filepath, args.color_always)
    txts.transform()

if __name__ == "__main__":
    main()

